#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import socket
import sys
import json

# --- Configuration ---
SOCKET_PATH = "/tmp/mcp_manager.sock"
# ---

def main():
    parser = argparse.ArgumentParser(
        description="Command-line tool for managing MCP server daemon",
        formatter_class=argparse.RawTextHelpFormatter
    )
    subparsers = parser.add_subparsers(dest='command', required=True, help='Command to execute')

    # 'status' command
    subparsers.add_parser('status', help='Display status of all servers')

    # 'start' command
    parser_start = subparsers.add_parser('start', help='Start server with specified ID')
    parser_start.add_argument('server_id', help='ID of the server to start')

    # 'stop' command
    parser_stop = subparsers.add_parser('stop', help='Stop server with specified ID')
    parser_stop.add_argument('server_id', help='ID of the server to stop')

    # 'restart' command
    parser_restart = subparsers.add_parser('restart', help='Restart server with specified ID')
    parser_restart.add_argument('server_id', help='ID of the server to restart')

    # 'apply' command
    subparsers.add_parser('apply', help='Load configuration file and start all servers')

    args = parser.parse_args()

    request = {'command': args.command, 'payload': None}
    if hasattr(args, 'server_id') and args.command != 'apply':
        request['payload'] = args.server_id

    try:
        with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s:
            s.connect(SOCKET_PATH)
            s.sendall(json.dumps(request).encode('utf-8'))
            
            # Increase response buffer size
            response_data = s.recv(8192)
            if not response_data:
                print("No response received from daemon.", file=sys.stderr)
                return

            response = json.loads(response_data.decode('utf-8'))

            if response.get('status') == 'ok':
                if args.command == 'status':
                    process_list = response.get('payload', [])
                    if not process_list:
                        print("No servers are defined in the configuration file.")
                    else:
                        print(f"{'ID':<8} {'STATUS':<9} {'PID':>7} {'UPTIME':>15} {'COMMAND'}")
                        print(f"{'-'*8} {'-'*9} {'-'*7} {'-'*15} {'-'*40}")
                        for p in sorted(process_list, key=lambda x: x['id']):
                            pid = str(p['pid'])
                            print(f"{p['id']:<8} {p['status']:<9} {pid:>7} {p['uptime']:>15} {p['command']}")
                else:
                    print(response.get('message', 'Success.'))
            else:
                print(f"Error: {response.get('message', 'Unknown error')}", file=sys.stderr)
                sys.exit(1)

    except FileNotFoundError:
        print(f"Error: Daemon is not running or socket '{SOCKET_PATH}' not found.", file=sys.stderr)
        sys.exit(1)
    except ConnectionRefusedError:
        print(f"Error: Connection to daemon was refused. Is the daemon running?", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()